steps:
  # Activate service account
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "$$SERVICE_ACCOUNT_KEY" > /workspace/service-account.json
        echo "[DEBUG] Created service account key file:"
        ls -l /workspace/service-account.json
        echo "[DEBUG] First few lines of service account key (redacted):"
        head -n 3 /workspace/service-account.json | sed 's/\("private_key": "\)[^"]*\(".*\)/\1REDACTED\2/'
        gcloud auth activate-service-account --key-file=/workspace/service-account.json
    secretEnv: ['SERVICE_ACCOUNT_KEY']

  # Run setup.sh using google/cloud-sdk image which has both Python and gcloud
  - name: 'google/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Debug: List files in workspace
        echo "Contents of /workspace before any operations:"
        ls -la /workspace
        echo
        echo "Contents of /workspace/terraform (if it exists):"
        ls -la /workspace/terraform || echo "terraform directory not found"
        echo
        
        # Create config.yaml from example and replace placeholders
        echo "Creating config.yaml from example..."
        cp /workspace/config.yaml.example /workspace/config.yaml
        
        # Replace placeholders before YAML parsing
        sed -i "s/%PROJECT_ID%/${_PROJECT_ID}/g" /workspace/config.yaml
        sed -i "s/%REGION%/${_REGION}/g" /workspace/config.yaml
        
        # Create temporary Python script for config reading that handles placeholders
        echo "import yaml" > read_config.py
        echo "with open('config.yaml', 'r') as f:" >> read_config.py
        echo "    config = yaml.safe_load(f)" >> read_config.py
        echo "print('PROJECT_ID=' + str(config['gcp']['project_id']).strip())" >> read_config.py
        echo "print('REGION=' + str(config['gcp']['region']).strip())" >> read_config.py
        
        # Create training data from example
        echo "Creating training data from example..."
        mkdir -p /workspace/data/training
        cp /workspace/data/training/transaction_categorizations.example.xlsx /workspace/data/training/transaction_categorizations.xlsx
        
        # Install required system packages
        echo "Installing system packages..."
        apt-get update && \
        echo "[DEBUG] Initial apt-get update complete" && \
        apt-get install -y python3.11-venv wget unzip python3-pip gnupg software-properties-common curl && \
        echo "[DEBUG] Base packages installed successfully" && \
        # Add Terraform repository
        echo "Adding HashiCorp repository..." && \
        curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add - && \
        echo "[DEBUG] HashiCorp GPG key added" && \
        apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" && \
        echo "[DEBUG] HashiCorp repository added" && \
        apt-get update && \
        echo "[DEBUG] Repository update complete" && \
        apt-get install -y terraform && \
        echo "[DEBUG] Terraform installed successfully: $(terraform --version)"

        # Debug: Show Python version and location
        echo "[DEBUG] Python environment:"
        echo "Python version:"
        python3 --version
        echo "Python location:"
        which python3
        echo "Pip version:"
        pip3 --version
        echo "Pip location:"
        which pip3

        # Create and activate virtual environment
        echo "[DEBUG] Setting up virtual environment..."
        echo "Creating virtual environment at /workspace/venv"
        python3 -m venv /workspace/venv
        echo "[DEBUG] Virtual environment creation complete"
        echo "[DEBUG] Virtual environment contents before activation:"
        ls -la /workspace/venv/bin
        echo "Activating virtual environment..."
        export VIRTUAL_ENV=/workspace/venv
        . /workspace/venv/bin/activate
        
        # Verify virtual environment
        echo "[DEBUG] Virtual environment verification:"
        echo "Virtual environment created at: $$VIRTUAL_ENV"
        echo "Using Python: $(which python3)"
        echo "Python version: $(python3 --version)"
        echo "Using pip: $(which pip)"
        echo "Pip version: $(pip --version)"

        # Install Python requirements in the virtual environment
        echo "[DEBUG] Installing Python requirements..."
        echo "Contents of requirements.txt:"
        cat requirements.txt
        pip install --require-virtualenv -r requirements.txt
        echo "[DEBUG] Python requirements installation complete"

        # Set PATH to include venv before running setup.sh
        export PATH="/workspace/venv/bin:$$PATH"

        # Set region in gcloud config
        gcloud config set compute/region ${_REGION}

        # Debug: Check terraform directory again before running setup.sh
        echo
        echo "Contents of /workspace/terraform before running setup.sh:"
        ls -la /workspace/terraform || echo "terraform directory not found"
        echo

        # Debug: Check service account file
        echo "[DEBUG] Checking service account file..."
        if [ -f "/workspace/service-account.json" ]; then
            echo "[DEBUG] Service account file exists"
            echo "[DEBUG] File permissions:"
            ls -l /workspace/service-account.json
            # Copy to credentials directory for Terraform
            mkdir -p /workspace/credentials
            cp /workspace/service-account.json /workspace/credentials/service-account-key.json
            echo "[DEBUG] Copied service account key to credentials directory"
            echo "[DEBUG] Verifying copied file:"
            ls -l /workspace/credentials/service-account-key.json
            echo "[DEBUG] First few lines of copied key (redacted):"
            head -n 3 /workspace/credentials/service-account-key.json | sed 's/\("private_key": "\)[^"]*\(".*\)/\1REDACTED\2/'
            echo "[DEBUG] Contents of credentials directory:"
            ls -la /workspace/credentials
        else
            echo "[ERROR] Service account file not found at /workspace/service-account.json"
            echo "[DEBUG] Contents of /workspace:"
            ls -la /workspace
        fi

        # Now run setup.sh in the virtual environment
        cd /workspace
        export GOOGLE_APPLICATION_CREDENTIALS=/workspace/credentials/service-account-key.json
        echo "[DEBUG] Set GOOGLE_APPLICATION_CREDENTIALS to: $$GOOGLE_APPLICATION_CREDENTIALS"
        bash scripts/setup.sh
    env:
      - 'CLOUD_BUILD=1'
      - 'NON_INTERACTIVE=1'
      - 'PYTHONUNBUFFERED=1'
    id: 'run-setup'

timeout: '1800s'  # 30 minutes

substitutions:
  _PROJECT_ID: shanedancy-9f2a3  # Default value, can be overridden
  _REGION: us-central1  # Default value, can be overridden

availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/service-account-key/versions/latest
      env: 'SERVICE_ACCOUNT_KEY'