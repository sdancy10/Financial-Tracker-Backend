steps:
  # Activate service account
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "$$SERVICE_ACCOUNT_KEY" > /workspace/service-account.json
        gcloud auth activate-service-account --key-file=/workspace/service-account.json
    secretEnv: ['SERVICE_ACCOUNT_KEY']

  # Run setup.sh using google/cloud-sdk image which has both Python and gcloud
  - name: 'google/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Debug: List files in workspace
        echo "Contents of /workspace:"
        ls -la /workspace
        
        # Create config.yaml from example
        echo "Creating config.yaml from example..."
        cp /workspace/config.yaml.example /workspace/config.yaml
        
        # Update project-specific values
        sed -i "s/YOUR_PROJECT_ID/${_PROJECT_ID}/g" /workspace/config.yaml
        sed -i "s/YOUR_REGION/${_REGION}/g" /workspace/config.yaml
        
        # Install python3-venv
        apt-get update && apt-get install -y python3-venv

        # Create and activate virtual environment
        python3 -m venv /workspace/venv
        . /workspace/venv/bin/activate

        # Set PATH to include venv before running setup.sh
        export PATH="/workspace/venv/bin:$$PATH"

        # Now run setup.sh in the virtual environment
        cd /workspace
        bash scripts/setup.sh
    env:
      - 'CLOUD_BUILD=1'
      - 'NON_INTERACTIVE=1'
      - 'PYTHONUNBUFFERED=1'
      - 'GOOGLE_APPLICATION_CREDENTIALS=/workspace/service-account.json'
      - 'VIRTUAL_ENV=/workspace/venv'
    id: 'run-setup'

timeout: '1800s'  # 30 minutes

substitutions:
  _PROJECT_ID: shanedancy-9f2a3  # Default value, can be overridden
  _REGION: us-central1  # Default value, can be overridden

availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/service-account-key/versions/latest
      env: 'SERVICE_ACCOUNT_KEY'